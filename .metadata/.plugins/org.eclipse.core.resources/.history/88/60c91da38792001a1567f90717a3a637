package com.example.demo.controller;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Category;
import com.example.demo.repository.CategoryRepo;

@RestController
@RequestMapping("/api")
public class CategoryController {

	private CategoryRepo categoryrepo;
	
	
	
	public CategoryController(CategoryRepo categoryrepo) {
		super();
		this.categoryrepo = categoryrepo;
	}


	@GetMapping("/categories")
	Collection<Category> categories()
	{
		return categoryrepo.findAll();
	}
	
	@GetMapping("/category/{id}")
	ResponseEntity<?> getCategory(@PathVariable int id)
	{
		Optional<Category> cat = categoryrepo.findById(id);
		return cat.map(response -> ResponseEntity.ok().body(response)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
	}
	
	@PostMapping("/category")
	ResponseEntity<Category> createCategory(@Valid @RequestBody Category category) throws URISyntaxException
	{
		Category result = categoryrepo.save(category);
		return ResponseEntity.created(new URI("/api/category" + result.getId())).body(result);
		
	}
	
	@PutMapping("/category/{id}")
	ResponseEntity<Category> updateCategory(@Valid @RequestBody Category category)
	{
		Category result = categoryrepo.save(category);
		return ResponseEntity.ok().body(result);
	}
	
}
